🍝스프링의 특징: 중요한 로직은 감춘다.

🥣view name
옛날엔 문자열 타입으로 뷰 이름을 리턴하는 게 아니라 Model And View 객체를 만들어서 거기에 여러가지를 담았다고 하넹용
문자열은 후에 추가된 기능.

model and view를 이용해서 리턴해보기編
mv.setViewName("index");
return mv;
이름만 보낼 땐 귀찮아서 스트링 타입으로 반환하는 게 나오게 되었다.

프론트엔드의 이름만 호출할 때: 스트링
뭔가를 싣을 때. 비즈니스 로직의 처리 결과 값을 클라이언트에게 전달할 때, 그 값을 출력하기 위해 싣는 목적: model and view
예를 들어 로그인 결과, 회원가입 성공 실패 여부.

web.servlet.ModelAndView
api를 찾아보자
생성자 안에 다양한 파라미터가 들어갈 수 있다구~

addObject 메소드 여러가지가 있다구~
파라미터가 Object이다. 모든 게 다 들어갈 수 있다는 뜻.
주로 쓰는 건
addObject(String name, Object object)

getViewName     (스트링 타입을 리턴),
setViewName(String ViewName)
정도 많이 쓴다구~

🍨model and view
view name만이 아니라 mv 객체 내용물들 다 같이 디스패쳐 서블릿으로 넘어간다.
뷰 리졸버에게는 이름만 넘겨줌.
그리고 클라이언트에게 보낼 때는 뷰 네임, 추가한 객체 모두 다 함께 넘어간다.
index 페이지로 넘어간다.


🥧중요한 것 아주 아주 아주 아주 아주 아주 아주
model and view의 String attributeName을 jsp 문서에 출력한다고 할 때,
지금까진 <%= name %>으로 썼음.(jsp 1.0버전)
프레임워크로 오면서 🍦🍦🍦🍦🍦EL태그, JSTL태그🍧🍧🍧🍧🍧를 사용하기로 함.(jsp 2.0버전인 jstl)


🍩넘어 온 객체는 어떻게 받는가
<%= name %>으로는 못 받음.

값만 출력할 땐 EL 태그라는 친구를 사용. Expression Language
Expressions의 확장 버전.
${출력 이름} (여기선 ""없음)
제이쿼리같이 생겼다.
<스크립트>태그 안에서 쓸 때는 " "필요. 

🍪톰캣은 jsp 주석 아니면 다 실행시킨다.
<!-- -->같은 html 주석도 실행함.

🎂% 태그들은 model1에서 쓴다. 1.0버전
model2에선 쓰지 않음. 2.0버전

🍰배열은 el 태그로 바로바로 출력할 수 없고
제어문을 써야 함. 제어문 제어문 (조느라 제대로 못 봤으니 제어문 뭐가 있는지 나중에 찾아보기)
>>jstl 태그를 사용해야!

🧁JSTL
sun microsystems가 사라져서 과거랑 똑같은 상태. 업데이트 X
라이브러리이다.
<%@taglib %>로 가져다 쓰기.
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

앞에 c가 붙는다
choose - if else와 같음.
for Each - for과 같음

배열과 어레이 리스트 등은 JSTL 태그로 보낸다.
items="컨트롤러에서 넘어온 배열 또는 어레이 리스트 객체명, EL형식으로 작성" (""빼먹지 말기)
items="${list}"

그리고 제어문을 활용하면 된다.

<%-- 
	<!-- model and view 객체가 넘어온다. name이 홍길동이라는 상태 -->
	Attribute Name: ${name}<br>
	Attribute Age: ${age}<br>
	<div>list 객체 출력 > JSTL</div>
	<c:forEach var="name" items="${list}"> 리스트에 들어있는 걸 name변수 안에 넣고 
		<div>${name}</div>  그 name변수를 출력
	</c:forEach>
--%>
허미 추워

🍫EL태그+JSTL태그 심화편
el태그를 쓴다,,는 것은,,,,, 컨트롤러 내부에서 값을 준다는 뜻.(addObject)
모든 값의 생성은 앞으로는 컨트롤러에서 담당!

데이터를 컨트롤러에서 view로 전달하는 작업을 하는 것임.
그때 el태그와 jstl태그를 쓴다는 얘기.. 


JSTL2
vo객체를 만들어서 진행......행....>어레이 리스트에 넣어 놓자.
VO만드는 건 model1에서 한거랑 같음
필드 만들고 getter setter 메소드 만들기.

EL태그에선 vo.getName()
이 아니라
vo뒤에 바로 필드의 이름을 붙이면 됨.

<ul>
<c:forEach var="vo" items="${userlist}">
	<li>
		<label>이름:</label>
		<span>${vo.name}</span>
	</li>
	<li>
		<label>나이:</label>
		<span>${vo.age}</span>
	</li>
	<li>
		<label>주소:</label>
		<span>${vo.addr}</span>
	</li>
</c:forEach>
</ul>

🍬DB연동하기~
(그림 보기)
repository는 dao의 역할
dao와 controller의 연결을 볼 수가 있다.
DAO는 java file, controller도 javafile 
데이터를주고 받는 것은 controller에서
view는 db랑 연동하는 로직을 실행하는 담당이 아님
실제 데이터를 출력만 할 뿐이지 가장 해킹하기 쉬운 브라우저와 가장 가깝기 때문에 view는 db에 접근할 방법이 X

dao도 vo도 컨트롤러도 전부 다 src/main/java에 저장.


POJO방식덕분에
model1에서 쓰던 자바 vo, dao를 그대로 쓸 수 있다는 점 우왕~~~~~~
정말로 그냥 그대로 쓸 수 있다.
클래스파일 말고 자바 파일,,,바붕양

🍭CGV db 연동
dao와 vo도 그냥 가져와서 사용 가능.

로그인을 한다 치면~
기존의 dao와 vo를 연결하는 작업만 하면 된다
>이건 전부 컨트롤러에서 일어나게 하면 됨.

🍡가장 먼저 로그인을 해 봅시다.
로그인 버튼을 눌렀을 때 넘어가도록 해야 한다! 자바스크립트녀석~~이번엔 암것도 안하네,,,미안,,

🎈login.jsp
에는 form이 있음

넘기는방법: action에 login.do 같은 이름 사용. method는 post <<이번엔 이것을 써 볼 것임
넘기는 방법2: action에 이름을 새로 만들어서 하는 경우.

폼의
action="login.do" method="post"

🎈loginController
데이터가 넘어간다> 무조건 파라미터에서 받음
vo가 있으면 vo로 매핑해주는 것을 아주아주아주아주아주아주아주아주아주아아주아주아우자아주우
추천

처리받는 데이터의 파라미터가 vo.

컨트롤러에서!
//로그인 실패/성공 했을 때의 view name을 분기로 나눠서 보내줘야 함.
이때 데이터를 갖고 갈 것인지 아닌지를 정해야 함.
우리는 가져가기로 했기 때문에
model and view로 타입을 바구기로 햇당

분기
-성공>mv의 viewname: index
-실패>mv의 viewname: /login/login

alert를 띄울 때.
mv에 값을 함께 보낸다. add object


✨el로 보내는 정보는 바로 사용할 수 있다!
var login_result = "${login_result}";
이렇게. 
""를 빼지 맙시다.



🍮회원가입
자바스크립트의 confirm.
으윽 오늘 뭔가 자와자와,,,,자와자와,,,하다 장기들이

🍯

🍼

🥛

🧃

☕

🍵

🧉

🍶

🍾

🍷